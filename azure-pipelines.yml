trigger:
  branches:
    include:
      - main

variables:
  azureSubscription: 'dotnet'  # Replace with your Azure subscription name
  webAppName: 'dotnet-mv'      # Replace with your Azure Web App name
  vmImageName: 'ubuntu-latest'

stages:
- stage: Build
  displayName: Install and Build Artifacts
  jobs:
  - job: buildArtifacts
    displayName: Build Artifacts
    pool:
      name: IsmailAgent  # Specify the agent pool here
    steps:
    - task: UseDotNet@2
      displayName: Install .NET 6 SDK
      inputs:
        packageType: sdk
        version: 6.0.x
        installationPath: $(Agent.ToolsDirectory)/dotnet

    - task: DotNetCoreCLI@2
      displayName: Restore NuGet Packages
      inputs:
        command: restore
        projects: '**/WebApp.csproj'

    - task: DotNetCoreCLI@2
      displayName: Build Web App
      inputs:
        projects: '**/WebApp.csproj'
        arguments: '--configuration release'

    - task: PublishPipelineArtifact@0
      displayName: Publish Pipeline Artifacts
      inputs:
        targetPath: $(Build.ArtifactStagingDirectory)
        artifactName: Webapp

- stage: Deploy
  displayName: Deployment
  dependsOn: Build  # Ensures that Deploy stage only runs after Build stage is successful
  condition: succeeded()
  jobs:
  - deployment: DeployLinuxWebApp
    displayName: Deploy Linux Web App
    environment: 'development'
    pool:
      name: IsmailAgent  # Use the same agent pool for the deploy stage
    strategy:
      runOnce:
        deploy:
          steps:
          - task: DownloadPipelineArtifact@2
            displayName: Download Pipeline Artifact
            inputs:
              artifactName: Webapp
              targetPath: $(System.ArtifactsDirectory)

          - task: AzureWebApp@1
            displayName: Azure Web App Deploy
            inputs:
              azureSubscription: $(azureSubscription)
              appType: webAppLinux
              appName: $(webAppName)
              package: '$(System.ArtifactsDirectory)/*.zip'
